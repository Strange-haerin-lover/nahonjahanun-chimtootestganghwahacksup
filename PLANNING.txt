HRL
manager, worker, judge
manager: 다음 스텝의 상태를 정의 한다(어떤 기준? 어떻게?)
worker: manager가 정의한 다음 스텝의 상태를 만들기 위해 다양한 툴들을 사용한다(성공하면 skill_book에 추가한다. 이미 있다면(같은 시작 소스(정보)를 가지고 같은 상태(정보)에 도달) 더 적은 도구로 혹은 더 빨리 도달한 방법을 skill_book에 추가한다)
--여기서 툴들은 nmap, gobuster, tshark, curl 등이며 각각의 기능들은 미리 정의 해줘야 한다
judge: manager가 내린 다음 스텝을 평가한다. 과거의 기록을 가지고 평가한다(이 부분 더 고민 필요)

필요한것 들
1. 위에서 설명한 HRL 구조
2. 공격 대상 로컬 서버(FLAG가 존재 해야함)
3. 

최대한 간결하게 

작업 순서
1. 아직 해결 되지 않은 manager와 judge의 행동 및 보상, worker에게 줄 보상 시스템 설계
2. 공격 대상(로컬 FLAG 조재 연습용 서버)
3. HRL 구조 제작
4. 학습 루프 - 학습은 필요없다. 직접 연습용 서버를 해킹 하면서 배운다 manager도 worker도 judge도
5. 프로토타입에서 툴은 nmap, gobuster, tshark, curl 등 만 지원하고 나머지는 추후 더 지원한다
6. 더 필요한 내용은 생략한다( 테스트, 유지 보수를 위한 최적화 등)


목적: 아무것도 모르는 상태 에서 툴의 사용법만 알려주고 해킹을 하게 해 창의적인 공격 루트를 만들 수 있는가?


핵심 아이디어 (요약)

입력 제약: 취약점 지식, 플레이북, 워크플로 힌트 전부 금지. 오직 nmap/gobuster/tshark/curl의 “사용법 카드”만 제공.

목표 제약: Manager는 “구체 행위” 대신 “정보 상태”만 요구(예: 서비스 식별됨, 웹 경로 K개 확보, 권한/토큰 후보 검출).

창의성 유도: Judge가 성공률과 함께 새로운 경로성(novelty), 도구 효율성을 보상에 반영 → 익숙한 루트 반복 억제.

스킬 진화: Worker가 발견한 루트를 skill_book에 기록하되, 유사 루트만 교체하고 이질 루트는 공존(다양성 유지).


아무것도 모르는 상태에서 시작
knowledge database에 새로 발견한 정보를 저장
